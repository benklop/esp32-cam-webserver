; PlatformIO Project Configuration File
; https://docs.platformio.org/page/projectconf.html

; ================================================================
; =                                                              =
; =    DO NOT USE PLATFORMIO FOR THIS PROJECT                    =
; =                                                              =
; = 14 March 2022 : When built with Platformio this project      =
; =   does not run properly; any streams you start will fail     =
; =   with 'ESP_ERR_HTTPD_RESP_SEND' in the serial console and   =
; =   ERR_INVALID_CHUNK_ENCODING 200 (OK) in the browser console.=
; =                                                              =
; = This is a difficult issue, and currently unresolved.         =
; = See:                                                         =
; = https://github.com/easytarget/esp32-cam-webserver/issues/218 =
; =                                                              =
; = The focus of thei project is to show a expanded example      =
; = using the official Arduino IDE. PlatformIO is, and has       =
; = always been, a nice-to-have; so I will be releasing 4.x      =
; = without platformio support. See the above github issue if    =
; = you are able to help fixing this.                            =
; =                                                              =
; ================================================================
;

; The esp32-cam-webserver project is intended to be easily compilable
; with the stock Arduino IDE.
; - Maintaining compatibility with other development environments
;   is important, but I wont accept changes to the PlatformIO build that
;   break compatibilty with the stock IDE. Eg by using non-standard
;   partition schemes or overriding Arduino defined limits, etc.

[env]
platform_packages = framework-arduinoespressif32@https://github.com/espressif/arduino-esp32.git#2.0.3
monitor_speed = 115200
upload_speed = 921600
monitor_rts = 0
monitor_dtr = 0
board_build.partitions = partitions.csv
;board_build.partitions = min_spiffs.csv
monitor_filters = esp32_exception_decoder
lib_deps = 
    https://github.com/me-no-dev/ESPAsyncWebServer.git
    https://github.com/espressif/json_generator.git
    https://github.com/espressif/json_parser.git
    bblanchon/ArduinoJson


[env:firmware_ESP32]
platform = espressif32
board = esp32dev
framework = arduino
board_build.filesystem = littlefs
build_flags = ${env.build_flags}
    -DBOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue
    -D USE_LittleFS=1 
    -D CAMERA_MODEL_AI_THINKER=1


[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
board_build.filesystem = littlefs
build_flags =
    -DBOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue
    -D USE_LittleFS=1 
    -D CAMERA_MODEL_AI_THINKER=1
;    -D CAMERA_MODEL_WROVER_KIT=1           # default
;    -D CAMERA_MODEL_ESP_EYE=1
;    -D CAMERA_MODEL_M5STACK_PSRAM=1
;    -D CAMERA_MODEL_M5STACK_V2_PSRAM=1
;    -D CAMERA_MODEL_M5STACK_WIDE=1
;    -D CAMERA_MODEL_M5STACK_ESP32CAM=1     # Originally: CAMERA_MODEL_M5STACK_NO_PSRAM
;    -D CAMERA_MODEL_TTGO_T_JOURNAL=1
;    -D CAMERA_MODEL_ARDUCAM_ESP32S_UNO=1
;    -D CAMERA_MODEL_LILYGO_T_SIMCAM=1


; For OTA uploading uncomment the next lines and add the IP address or mDNS name of the camera module, and the OTA password
;upload_protocol = espota
;upload_port = <IP or mDNS>
;upload_flags =
;    --auth=<OTA PASSWORD>